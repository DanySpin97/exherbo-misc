# Copyright 2009 Pierre Lejeune <superheron@gmail.com>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'linux-info.exlib' from Gentoo, which is:
#     Copyright 1999-2006 Gentoo Foundation

export_exlib_phases pkg_setup

require multilib

myexparam config_check=[ ]

DEPENDENCIES="
    build:
        sys-kernel/vanilla-sources
"

#KERNEL_ARCH="$(uname -m)"
CURRENT_KV="$(uname -r)"

get_all_available_kernels() {
    illegal_in_global_scope
    local result kernel_ver kernel_dir
    for kernel_ver in $(ls -d /usr/src/linux-*); do
        kernel_dir=$(basename ${kernel_ver})
        result="${result} ${kernel_dir:6}"
    done
    echo -n "${result}"
}

get_kernel_dir() {
    illegal_in_global_scope
    local kernel_ver="${1:-${CURRENT_KV}}" kernel_dir="/usr/src/linux-${kernel_ver}"
    [[ -h "${kernel_dir}" ]] && kernel_dir="$(readlink -f ${kernel_dir})"
    [[ -d "${kernel_dir}" ]] && echo -n "${kernel_dir}" || die "${kernel_dir} does not exist."
}

is_kernel_configured() {
    illegal_in_global_scope
    local kernel_ver="${1:-${CURRENT_KV}}" kernel_dir="$(get_kernel_dir ${kernel_ver})"
    [[ -s "${kernel_dir}/.config" ]] && echo -n "0" || echo -n "1"
}

require_configured_kernel() {
    illegal_in_global_scope
    local kernel_ver="${1:-${CURRENT_KV}}"
    if [[ "$(is_kernel_configured ${kernel_ver})" != "0" ]]; then
        eerror "Could not find a usable .config in the kernel source directory for kernel ${kernel_ver}."
        eerror "Please ensure that $(get_kernel_dir {kernel_ver}) points to a configured set of Linux sources."
        die "Kernel ${kernel_ver} not configured; no .config found in $(get_kernel_dir {kernel_ver})"
    fi
}

get_CONFIG_variable() {
    illegal_in_global_scope
    local config="$(echo ${1} | tr [:lower:] [:upper:])" kernel_ver="${2:-${CURRENT_KV}}" result error_msg kernel_dir
    if [[ ${#} < 1 ]]; then
        error_msg="Function get_config_variable needs at least one argument :\n"
        error_msg="${error_msg} 1) the CONFIG_* variable to find\n"
        error_msg="${error_msg} 2) the kernel version to check against (optional, use current kernel if not defined)"
        die "${error_msg}"
    fi
    require_configured_kernel "${kernel_ver}"
    kernel_dir="$(get_kernel_dir ${kernel_ver})"
    if [[ ! -f "${kernel_dir}/.config" ]]; then
        die "${kernel_dir}/.config does not exist yet."
    else
        result="$(grep "CONFIG_${config}=" ${kernel_dir}/.config)"
        result="${result/CONFIG_${config}=/}"
        echo -n "${result}"
    fi
}

get_Makefile_variable() {
    illegal_in_global_scope
    local var="${1}" kernel_ver="${2:-${CURRENT_KV}}" error_msg kernel_dir
    if [[ ${#} < 1 ]]; then
        error_msg="Function get_Makefile_variable needs at least one argument :\n"
        error_msg="${error_msg} 1) the Makefile variable to find\n"
        error_msg="${error_msg} 2) the kernel version to check against (optional, use current kernel if not defined)"
        die "${error_msg}"
    fi
    kernel_dir="$(get_kernel_dir ${kernel_ver})"
    if [[ ! -f "${kernel_dir}/Makefile" ]]; then
        die "${kernel_dir}/Makefile does not exist. Please check kernel sources."
    else
        echo -e "e:\\n\\t@echo \$(${var})\\include Makefile" | make -C "$(get_kernel_dir ${kernel_ver})" M="${WORK}" -s -f - 2> /dev/null
    fi
}

get_modules_build_dir() {
    illegal_in_global_scope
    local kernel_ver="${1:-${CURRENT_KV}}" modules_build_dir="$(get_Makefile_variable KBUILD_OUTPUT ${kernel_ver})"
    [[ -z "${modules_build_dir}" ]] && modules_build_dir="/$(get_libdir)/modules/${kernel_ver}/build"
    [[ -h "${modules_build_dir}" ]] && modules_build_dir="$(readlink -f ${modules_build_dir})"
    [[ -d ${modules_build_dir} ]] && echo -n "${modules_build_dir}" || die "${modules_build_dir} does not exist."
}

get_kernelver_VERSION() {
    local kernel_ver="${1:-${CURRENT_KV}}"
    echo -n "$(get_Makefile_variable VERSION ${kernel_ver})"
}

get_kernelver_PATCHLEVEL() {
    local kernel_ver="${1:-${CURRENT_KV}}"
    echo -n "$(get_Makefile_variable PATCHLEVEL ${kernel_ver})"
}

get_kernelver_SUBLEVEL() {
    local kernel_ver="${1:-${CURRENT_KV}}"
    echo -n "$(get_Makefile_variable SUBLEVEL ${kernel_ver})"
}

get_kernelver_EXTRAVERSION() {
    local kernel_ver="${1:-${CURRENT_KV}}"
    echo -n "$(get_Makefile_variable EXTRAVERSION ${kernel_ver})"
}

is_CONFIG_var_set() {
    illegal_in_global_scope
    local config="$(echo ${1} | tr [:lower:] [:upper:])" kernel_ver="${2:-${CURRENT_KV}}" result
    require_configured_kernel "${kernel_ver}"
    result="$(get_CONFIG_variable ${config} ${kernel_ver})"
    [[ "${result}" = "y" || "${result}" = "m" ]] && echo -n 0 || echo -n 1
}

is_CONFIG_var_set_as_builtin() {
    illegal_in_global_scope
    local config="$(echo ${1} | tr [:lower:] [:upper:])" kernel_ver="${2:-${CURRENT_KV}}" result
    require_configured_kernel "${kernel_ver}"
    result="$(get_CONFIG_variable ${config} ${kernel_ver})"
    [[ "${result}" == "y" ]] && echo -n 0 || echo -n 1
}

is_CONFIG_var_set_as_module() {
    illegal_in_global_scope
    local config="$(echo ${1} | tr [:lower:] [:upper:])" kernel_ver="${2:-${CURRENT_KV}}" result
    require_configured_kernel "${kernel_ver}"
    result="$(get_CONFIG_variable ${config} ${kernel_ver})"
    [[ "${result}" == "m" ]] && echo -n 0 || echo -n 1
}

get_CONFIG_as_string_var() {
    illegal_in_global_scope
    local config="$(echo ${1} | tr [:lower:] [:upper:])" kernel_ver="${2:-${CURRENT_KV}}"
    require_configured_kernel "${kernel_ver}"
    echo -n "$(get_CONFIG_variable ${config} ${kernel_ver})"
}

kernel_is() {
    illegal_in_global_scope
    local kernel_ver operator test x=0 y=0 z=0 VERSION PATCHLEVEL SUBLEVEL
    if [[ "${1}" == "[[:digit:]]{1}(\.[[:digit:]]+){2}*" ]]; then
        kernel_ver="${1}"
        shift
    else
        kernel_ver="${CURRENT_KV}"
    fi
    VERSION="$(get_kernelver_VERSION ${kernel_ver})"
    PATCHLEVEL="$(get_kernelver_PATCHLEVEL ${kernel_ver})"
    SUBLEVEL="$(get_kernelver_SUBLEVEL ${kernel_ver})"
    case "${1}" in
        lt) operator="-lt"; shift;;
        gt) operator="-gt"; shift;;
        le) operator="-le"; shift;;
        ge) operator="-ge"; shift;;
        eq) operator="-eq"; shift;;
        *) operator="-eq";;
    esac

    for x in ${@}; do
        for((y=0; y<$((3 - ${#x})); y++)); do value="${value}0"; done
        value="${value}${x}"
        z=$((${z} + 1))

        case ${z} in
            1) for((y=0; y<$((3 - ${#VERSION})); y++)); do test="${test}0"; done;
                test="${test}${VERSION}";;
            2) for((y=0; y<$((3 - ${#PATCHLEVEL})); y++)); do test="${test}0"; done;
                test="${test}${PATCHLEVEL}";;
            3) for((y=0; y<$((3 - ${#SUBLEVEL})); y++)); do test="${test}0"; done;
                test="${test}${SUBLEVEL}";;
            *) die "Error in do_kernel_comparison(): Too many parameters.";;
        esac
    done

    [ ${test} ${operator} ${value} ] && return 0 || return 1
}

is_kernel_built() {
    illegal_in_global_scope
    local kernel_ver="${1:-${CURRENT_VER}}" kernel_dir="$(get_kernel_dir ${kernel_ver})"
    require_configured_kernel "${kernel_ver}"
    if [[ ! -f "${kernel_dir}/include/linux/version.h" ]]; then
        eerror "Sources for ${kernel_ver} have not yet been prepared."
        eerror "Modules cannot be built against an unprepared tree."
        eerror "To resolve this, please type the following:"
        eerror
        eerror "# cd ${kernel_dir}"
        [[ $(is_kernel_configured "${kernel_ver}") ]] || eerror "# make oldconfig"
        eerror "# make && make modules_install"
        eerror
        eerror "Then please try merging this module again."
        die "Kernel sources for ${kernel_ver} need to be compiled first"
    fi
}

are_loadable_kernel_modules_enabled() {
    illegal_in_global_scope
    local kernel_ver="${1:-${CURRENT_VER}}" kernel_dir="$(get_kernel_dir ${kernel_ver})"
    require_configured_kernel "${kernel_ver}"

    if [[ $(is_CONFIG_var_set_as_builtin "MODULES" "${kernel_ver}") == 1 ]]; then
        eerror "Sources for ${kernel_ver} do not support loadable kernel modules."
        eerror "To be able to use this module please enable \"Loadable modules support (CONFIG_MODULES)\""
        eerror "in your kernel, recompile and then try merging this module again."
        die "No support for loadable kernel modules in ${kernel_ver} config"

    fi
}

do_config_check() {
    illegal_in_global_scope
    local kernel_ver="${1:-${CURRENT_KV}}" CONFIG_CHECK
    local config negate die error reworkmodulenames
    local soft_errors_count=0 hard_errors_count=0 config_required=0

    exparam -v CONFIG_CHECK config_check[@]

    # Determine if we really need a .config. The only time when we don't need
    # one is when all of the CONFIG_CHECK options are prefixed with "~".
    for config in ${CONFIG_CHECK}; do
        if [[ "${config:0:1}" != "~" ]]; then
            config_required=1
            break
        fi
    done

    if [[ ${config_required} == 0 ]]; then
    # In the case where we don't require a .config, we can now bail out
    # if the user has no .config as there is nothing to do. Otherwise
    # code later will cause a failure due to missing .config.
        if [[ ! $(is_kernel_configured "${kernel_ver}") ]]; then
            ewarn "Unable to check for the following kernel config options due"
            ewarn "to absence of any configured kernel sources:"
            for config in ${CONFIG_CHECK}; do
                ewarn " - ${config#\~}"
            done
            ewarn "You're on your own to make sure they are set if needed."
            return 0
        fi
    else
        require_configured_kernel "${kernel_ver}"
    fi

    einfo "Checking for suitable kernel configuration options for kernel ${kernel_ver}..."

    for config in ${CONFIG_CHECK}; do
    # if we specify any fatal, ensure we honor them
        die=1
        error=0
        negate=0
        reworkmodulenames=0

        if [[ "${config:0:1}" == "~" ]]; then
            die=0
            config="${config:1}"
        elif [[ "${config:0:1}" == "@" ]]; then
            die=0
            reworkmodulenames=1
            config="${config:1}"
        fi
        if [[ "${config:0:1}" == "!" ]]; then
            negate=1
            config="${config:1}"
        fi

        if [[ ${negate} == 1 ]]; then
            [[ $(is_CONFIG_var_set ${config} ${kernel_ver}) == 0 ]] && error=2
        elif [[ ${reworkmodulenames} == 1 ]]; then
            local temp_config="${config//*:}" i n
            config="${config//:*}"
            if [[ $(is_CONFIG_var_set ${config} ${kernel_ver}) == 0 ]]; then
                for i in ${MODULE_NAMES}; do
                    n="${i//${temp_config}}"
                    [[ -z ${n//\(*} ]] && \
                    MODULE_IGNORE="${MODULE_IGNORE} ${temp_config}"
                done
                error=2
            fi
        else
            [[ $(is_CONFIG_var_set ${config} ${kernel_ver}) == 0 ]] || error=1
        fi

        if [[ ${error} > 0 ]]; then
            local report_func="eerror" local_error
            local_error="ERROR_${config}"
            local_error="${!local_error}"

            if [[ -z "${local_error}" ]]; then
                # using old, deprecated format.
                local_error="${config}_ERROR"
                local_error="${!local_error}"
            fi
            if [[ ${die} == 0 && -z "${local_error}" ]]; then
                #soft errors can be warnings
                local_error="WARNING_${config}"
                local_error="${!local_error}"
                if [[ -n "${local_error}" ]] ; then
                    report_func="ewarn"
                fi
            fi

            if [[ -z "${local_error}" ]]; then
                [[ ${error} == 1 ]] && local_error="is not set when it should be." || local_error="should not be set. But it is."
                local_error="CONFIG_${config}:\t ${local_error}"
            fi
            if [[ ${die} == 0 ]]; then
                ${report_func} "  ${local_error}"
                soft_errors_count=$[soft_errors_count + 1]
            else
                ${report_func} "  ${local_error}"
                hard_errors_count=$[hard_errors_count + 1]
            fi
        fi
    done

    if [[ ${hard_errors_count} > 0 ]]; then
        eerror "Please check to make sure these options are set correctly."
        eerror "Failure to do so may cause unexpected problems."
        eerror "Once you have satisfied these options, please try merging"
        eerror "this package again."
        die "Incorrect kernel configuration options for kernel ${kernel_ver}"
    elif [[ ${soft_errors_count} > 0 ]]; then
        ewarn "Please check to make sure these options are set correctly."
        ewarn "Failure to do so may cause unexpected problems."
    else
        eend 0
    fi
}

kernel-info_pkg_setup() {
    local kernel_ver CONFIG_CHECK

    exparam -v CONFIG_CHECK config_check[@]

    if [[ -n "${CONFIG_CHECK}" ]]; then
        for kernel_ver in $(get_all_available_kernels); do
            do_config_check "${kernel_ver}"
        done
    fi
}
