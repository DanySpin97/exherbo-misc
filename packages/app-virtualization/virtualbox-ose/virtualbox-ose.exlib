# Copyright 2009-2012 Pierre Lejeune <superheron@gmail.com>
# Distributed under the terms of the GNU General Public License v2

require freedesktop-desktop udev-rules

SUMMARY="A family of powerful x86 virtualization products"
DESCRIPTION="VirtualBox is a powerful x86 virtualization product for enterprise as well as home use. Not only is VirtualBox an extremely feature rich, high performance product for enterprise customers, it is also the only professional solution that is freely available as Open Source Software under the terms of the GNU General Public License (GPL)."
HOMEPAGE="http://www.virtualbox.org"
MY_PNV="VirtualBox-${PV}"
EXT_PN="Oracle_VM_VirtualBox_Extension_Pack"
DOWNLOADS="
    http://download.virtualbox.org/${PN%-ose}/${PV}/${MY_PNV}.tar.bz2
    additions? ( http://download.virtualbox.org/${PN%-ose}/${PV}/VBoxGuestAdditions_${PV}.iso )
    extensions? ( http://download.virtualbox.org/${PN%-ose}/${PV}/${EXT_PN}-${PV}.vbox-extpack -> ${EXT_PN}-${PV}.tar.gz )
"

LICENCES="CDDL-1.0 GPL-2 additions? ( PUEL ) extensions? ( PUEL )"
SLOT="0"
MYOPTIONS="X additions alsa dbus opengl pulseaudio python truetype vnc webservice wine
    additions [[ description = [ Installs Guest Additions ISO ] ]]
    extensions [[ description = [ Install Extension Pack (binary) ] ]]
    webservice [[ description = [ Builds VBoxWebSrv ] ]]
    wine [[ description = [ Builds wine support ] ]]

    ( opengl truetype ) [[ requires = X ]]
"

DEPENDENCIES="
    build:
        dev-util/kBuild
    build+run:
        !app-virtualization/virtualbox-bin
        app-arch/makeself
        dev-lang/yasm[>=0.5.1]
        dev-libs/libIDL:2
        dev-libs/libxml2:2.0[>=2.6.26]
        dev-libs/libxslt[>=1.1.17]
        dev-libs/openssl[>=0.9.8]
        group/usb
        group/vboxusers
        media-libs/libpng[>=1.2.5]
        net-misc/curl[>=7.16.1]
        sys-devel/dev86
        sys-libs/libcap
        sys-libs/pam
        sys-libs/zlib[>=1.2.1]
        sys-power/iasl
        || (
            app-cdr/cdrkit
            app-cdr/cdrtools
        )
        X?
        (
            media-libs/SDL[>=1.2.7][X]
            x11-libs/libX11
            x11-libs/libXcursor
            x11-libs/libXext
            x11-libs/libXrandr
            x11-libs/qt:4[>=4.4.3][opengl?][xinerama]
            opengl? ( x11-dri/mesa x11-libs/libXmu )
            truetype? ( media-libs/SDL_ttf[>=2.0.6] )
        )
        alsa? ( sys-sound/alsa-lib[>=1.0.6] )
        dbus? ( sys-apps/dbus )
        pulseaudio? ( media-sound/pulseaudio[>=0.9.0] )
        python? ( dev-lang/python:=[>=2.5] )
        vnc? ( net-libs/libvncserver[>=0.9.7] )
        webservice? ( net-libs/gsoap[>=2.7.9f] )
        wine? ( app-emulation/wine )
"

UPSTREAM_CHANGELOG="${HOMEPAGE}/wiki/Changelog"
UPSTREAM_DOCUMENTATION="${HOMEPAGE}/manual/UserManual.html"
UPSTREAM_RELEASE_NOTES="${HOMEPAGE}/wiki/News"

WORK="${WORKBASE}/${MY_PNV}"

pkg_pretend() {
    if [[ ! -e '/usr/include/gnu/stubs-32.h' ]]; then
        ewarn 'You do not have a 32-bit glibc.'
        ewarn 'Please switch to multilib first.'
        die 'No /usr/include/gnu/stubs-32.h found.'
    fi
}

pkg_setup() {
    exdirectory --allow /opt
}

src_unpack() {
    unpack ${MY_PNV}.tar.bz2
    if optionq extensions; then
        edo mkdir "${WORK}"/${EXT_PN}
        edo pushd "${WORK}"/${EXT_PN}
        unpack ${EXT_PN}-${PV}.tar.gz
        edo popd
    fi
}

src_prepare() {
    default
    # Disable -Werror for gcc-4.5 builds
    # See http://www.virtualbox.org/ticket/6715
    echo 'VBOX_WITH_WARNINGS_AS_ERRORS :=' >> "${WORK}/LocalConfig.kmk"
}

src_configure() {
    local myconf=
    if optionq X; then
        optionq opengl || myconf="${myconf} --disable-opengl"
        optionq truetype || myconf="${myconf} --disable-sdl-ttf"
    else
        myconf="${myconf} --build-headless"
    fi
    optionq alsa || myconf="${myconf} --disable-alsa"
    optionq dbus || myconf="${myconf} --disable-dbus"
    optionq pulseaudio || myconf="${myconf} --disable-pulse"
    optionq python || myconf="${myconf} --disable-python"
    optionq vnc && myconf="${myconf} --enable-vnc"
    optionq webservice && myconf="${myconf} --enable-webservice"
    optionq wine && myconf="${myconf} --setup-wine"
    # Those could become options
    # doc: Needs pdflatex
    # java: Needs detection in configure script
    myconf="${myconf} --disable-docs --disable-java"
    # Call configure script directly as it is not a GNU one
    edo ./configure --disable-kmods ${myconf}
}

src_compile() {
    edo source env.sh
    edo kmk -j${EXJOBS:-1} all
}

src_install() {
    local installdir= outdir=
    edo source env.sh
    installdir="/opt/VirtualBox"
    outdir="${WORK}/out/${BUILD_TARGET}.${BUILD_TARGET_ARCH}/release"

    insinto /etc/vbox
    hereins vbox.cfg <<EOF
# VirtualBox installation directory
INSTALL_DIR='${installdir}'
# VirtualBox version
INSTALL_VER='${PV}'
EOF

    insinto /usr/share/applications/
    doins "${outdir}"/bin/virtualbox.desktop

    insinto /usr/share/pixmaps/
    doins "${outdir}"/bin/VBox.png

    insinto /usr/share/"${PN}"
    doins -r "${outdir}"/bin/nls

    # Move kernel modules files
    insinto /usr/src/${PNV}
    doins -r "${outdir}"/bin/src/*

    dodir "${installdir}" /usr/bin
    insinto "${installdir}"
    doins -r "${outdir}"/bin/components

    edo mv "${outdir}"/bin/{*.so,*.r0,*.gc,VBox.sh,VBoxXPCOMIPCD,VBoxNetAdpCtl,VBoxNetDHCP,VBoxSVC,VBoxCreateUSBNode.sh} "${IMAGE}"/"${installdir}"
    for links in {VBoxHeadless,VBoxManage,VBoxSDL,VirtualBox};
    do
        edo mv "${outdir}"/bin/"${links}" "${IMAGE}"/"${installdir}"
        dosym "${installdir}"/VBox.sh /usr/bin/"${links}"
    done
    mv "${outdir}"/bin/VBoxTunctl "${IMAGE}"/"${installdir}"
    edo dosym "${installdir}"/VBoxTunctl /usr/bin/VBoxTunctl

    if optionq webservice; then
        mv "${outdir}"/bin/vboxwebsrv "${IMAGE}"/"${installdir}"
        edo dosym "${installdir}"/VBox.sh /usr/bin/vboxwebsrv
    fi

    # VirtualBox needs to be setuid
    edo chmod 4711 "${IMAGE}/${installdir}"/{VirtualBox,VBoxHeadless,VBoxNetAdpCtl,VBoxSDL}

    insinto "${UDEVRULESDIR}"
    hereins 10-vboxdrv.rules <<EOF
KERNEL=="vboxdrv", NAME="vboxdrv", OWNER="root", GROUP="vboxusers", MODE="0660"
KERNEL=="vboxnetctl", NAME="vboxnetctl", OWNER="root", GROUP="vboxusers", MODE="0660"
SUBSYSTEM=="usb_device", ACTION=="add", RUN+="${installdir}/VBoxCreateUSBNode.sh \$major \$minor \$attr{bDeviceClass} usb"
SUBSYSTEM=="usb", ACTION=="add", ENV{DEVTYPE}=="usb_device", RUN+="${installdir}/VBoxCreateUSBNode.sh \$major \$minor \$attr{bDeviceClass} usb"
SUBSYSTEM=="usb_device", ACTION=="remove", RUN+="${installdir}/VBoxCreateUSBNode.sh --remove \$major \$minor"
SUBSYSTEM=="usb", ACTION=="remove", ENV{DEVTYPE}=="usb_device", RUN+="${installdir}/VBoxCreateUSBNode.sh --remove \$major \$minor"
EOF

    # Install guest additions if required
    if optionq additions; then
        insinto "${installdir}"
        newins "${FETCHEDDIR}"/VBoxGuestAdditions_${PV}.iso VBoxGuestAdditions.iso
    fi
    if optionq extensions; then
        edo pushd "${WORK}"/${EXT_PN}
        insinto /opt/VirtualBox/ExtensionPacks/${EXT_PN}
        doins ExtPack* PXE-Intel.rom
        doins -r ${BUILD_TARGET}.${BUILD_TARGET_ARCH}
        edo popd
    fi
}

pkg_postinst() {
    ewarn "This exheres does not build the kernel modules for VirtualBox, you will have to do this"
    ewarn "on your own. The source code has been installed to /usr/src/${PNV}"

    for rule in {10-vboxdrv.rules,60-virtualbox.rules};
    do
        if [[ -f /etc/udev/rules.d/"${rule}" ]]; then
            ewarn "Old rules file /etc/udev/rules.d/${rule} found."
            ewarn "You should remove this file."
        fi
    done

    elog "In order to expose USB devices to VirtualBox guests, your user must be a member of"
    elog "the 'usb' group."
}

