# Copyright 2010-2015 Pierre Lejeune <superheron@gmail.com>
# Distributed under the terms of the GNU General Public License v2

require github cmake [ api=2 ] freedesktop-desktop

SUMMARY="Lightspark, a free flash player implementation"
DESCRIPTION="
Lightspark is an open source Adobe Flash implementation, designed from
the ground up to be efficient on current and (hopefully) future hardware.
"
HOMEPAGE="http://${PN}.github.io"

LICENCES="LGPL-3"
SLOT="0"
PLATFORMS="~amd64"
MYOPTIONS="
    curl
    nsplugin
    rtmp [[ description = [ Adds support for Real Time Messaging Protocol ] ]]
    scripts [[ description = [ Installs YouTube-related scripts ] ]]
    tightspark [[ description = [ Builds TightSpark ] ]]
    ( pulseaudio sdl ) [[ number-selected = exactly-one ]]
    ( providers: ffmpeg libav ) [[ number-selected = exactly-one ]]
    ( providers: ijg-jpeg jpeg-turbo ) [[ number-selected = exactly-one ]]
"

DEPENDENCIES="
    build:
        sys-devel/gettext
        virtual/pkg-config
    build+run:
        dev-cpp/libxml++:2.6[>=2.33.1]
        dev-lang/llvm[>=2.8]
        dev-lang/nasm
        dev-libs/boost[>=1.43.0]
        dev-libs/pcre
        media-libs/freetype
        media-libs/glew
        media-libs/libpng:=
        x11-dri/mesa
        x11-libs/cairo
        x11-libs/gtk+:2
        x11-libs/libX11
        x11-libs/pango
        curl? ( net-misc/curl )
        providers:ffmpeg? ( media/ffmpeg )
        providers:ijg-jpeg? ( media-libs/jpeg:= )
        providers:jpeg-turbo? ( media-libs/libjpeg-turbo )
        providers:libav? ( media/libav )
        pulseaudio? ( media-sound/pulseaudio )
        rtmp? ( media-video/rtmpdump )
        sdl? ( media-libs/SDL:0 )
"

RESTRICT="test" # requires Adobe Flex SDK (especially mxmlc)

src_configure() {
    local MY_PARAMS=(
        $(cmake_enable CURL)
        $(cmake_enable RTMP)
        $(cmake_option nsplugin COMPILE_PLUGIN)
        $(cmake_option tightspark COMPILE_TIGHTSPARK)
        -DAUDIO_BACKEND:STRING=$(option sdl sdl pulse)
    )
    ecmake "${MY_PARAMS[@]}"
}

src_install() {
    cmake_src_install

    if optionq scripts; then
        into "/usr/$(exhost --target)"
        dobin "${WORK}"/tools/{play-youtube,urldecode,youtube-args-dumper,youtube-get-player}.sh
    fi
}

